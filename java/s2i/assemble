#!/bin/sh

# Enable debugging on highest log level
if [ x"${BUILD_LOG_LEVEL}" = x5 ]; then
  set -x
fi

# Which version of hawt app to use
hawt_app_version="2.2.53"

# Global S2I variable setup
source `dirname "$0"`/s2i-setup

# Maven arguments setting up the environment
maven_env_args="-Dmaven.repo.local=${S2I_ARTIFACTS_DIR}/m2"

# =========================================================================
# Helper functions:

function check_error() {
  local label=$1
  local error=$2
  if [ ${error} -ne 0 ]; then
    echo "Aborting due to error code $error for $label"
    exit ${error}
  fi
}

function get_output_dir() {
  # If multi module build and no MAVEN_BUILD_DIR is set --> error
  if [ x"${MAVEN_BUILD_DIR}" = x ]; then
    echo "${MAVEN_ARGS} ${MAVEN_EXTRA_ARGS}" | grep -q ' -pl'
    if [ $? -eq 0 ]; then
       echo "\$MAVEN_BUILD_DIR must be set for multi module Maven builds"
       exit 1
    fi
  fi

  # Where artifacts are created within the build
  local dir=${MAVEN_BUILD_DIR:-${S2I_SOURCE_DIR}/target}

  # If MAVEN_BUILDd is not absolute then use it relative to S2I_SOURCE_DIR
  if [ "${dir:0:1}" != "/" ]; then
    dir="${S2I_SOURCE_DIR}/${dir}"
  fi
  # Normalize dir
  dir=$(echo ${dir} | tr -s /)
  dir=${dir%/}
  # The parent must exist but target/ won't exist yet
  if [ ! -d $(dirname "${dir}"}) ]; then
    echo "Please specify a build directory MAVEN_BUILD_DIR (tried '$(dirname "${dir}")' which does not exist)"
    exit 1
  fi
  echo ${dir}
}

function copy_dir() {
  local src=$1
  local dest=$2

  cp -r ${src}/* ${dest}
  check_error "copying ${src} to ${dest}" $?
}

function build_maven() {
  # Where artifacts are created during build
  local build_dir=$1

  # Where to put the artifacts
  local app_dir=$2

  # Use main class if given
  local hawtapp_main_arg=""
  if [ x"${JAVA_MAIN_CLASS}" != x ]; then
    hawtapp_main_arg="-Dhawt-app.javaMainClass=${JAVA_MAIN_CLASS}"
  fi

  # Default args: no tests, if a module is specified, only build this module
  local maven_args=${MAVEN_ARGS:-package -DskipTests ${hawtapp_main_arg} -e}
  echo "Found pom.xml ... attempting to build with mvn ${maven_env_args} ${maven_args} ${MAVEN_EXTRA_ARGS}"

  local old_dir=$(pwd)
  cd ${S2I_SOURCE_DIR}
  check_error "changing directory to ${S2I_SOURCE_DIR}" $?

  # =========
  # Run Maven
  mvn ${maven_env_args} --version
  mvn ${maven_env_args} ${maven_args} ${MAVEN_EXTRA_ARGS}
  check_error "Maven build" $?

  # ==================================================================
  # Check for hawt-app dir and if not present run hawt-app explicitly
  if [ ! -d "${build_dir}/hawt-app" ]; then
     if [ x"${JAVA_MAIN_CLASS}" = x ]; then
       echo "No JAVA_MAIN_CLASS specified and no hawt-app-maven-plugin configured in the pom.xml"
       exit 1
     fi
     mvn ${maven_env_args} ${hawtapp_main_arg} "io.fabric8:hawt-app-maven-plugin:${hawt_app_version}:build ${MAVEN_EXTRA_ARGS}"
  fi

  # ==============
  # Copy artifacts
  echo "Copying Maven artifacts from ${build_dir}/hawt-app to ${app_dir} ..."
  copy_dir "${build_dir}/hawt-app" ${app_dir}

  # ======================
  # Remove repo if desired
  if [ "x${MAVEN_CLEAR_REPO}" != "x" ]; then
    rm -rf "${S2I_ARTIFACTS_DIR}/m2"
    check_error "Cannot remove local Maven repository ${S2I_ARTIFACTS_DIR}/m2" $?
  fi

  cd ${old_dir}
}

# =========================================================================
# Main

echo "=================================================================="
echo "Starting S2I Java Build ....."
build_dir=$(get_output_dir)
check_error "Cannot get output dir: $build_dir" $?
if [ -f "${S2I_SOURCE_DIR}/pom.xml" ]; then
  echo "Detected Maven build"
  # If a pom.xml is present use maven
  build_maven ${build_dir} ${DEPLOYMENTS_DIR}
else
  # Assuming that the source already contains compiled artefacts
  echo "Copying binaries from ${output_dir} to ${S2I_ARTIFACTS_DIR} ..."
  copy_dir ${build_dir} ${DEPLOYMENTS_DIR}
fi

echo "... done"
